我现在要做map的page，
顶部是search bar，下面是假地图，
然后点进searchbar可以选择destination 和current location，
选定destination后点击start journey的button，
会出现两个选项，
一是walk alone（start now），
二是lets wa mode，可以随机匹配地点和出发点合适的队友一起走，
如果倒计时一分钟内没有匹配人选则自动选择walk alone（start now）     

我现在要做map的page，顶部是search bar，下面是假地图，然后点进searchbar可以选择destination 和current location，选定destination后点击start journey的button，会出现两个选项，一是walk alone（start now），二是lets wa mode，可以随机匹配地点和出发点合适的队友一起走，如果倒计时一分钟内没有匹配人选则自动选择walk alone（start now）              class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'JustBrightForUTM',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue.shade300),
        //scaffoldBackgroundColor: Colors.red[100],
         scaffoldBackgroundColor: const Color(0xFFFFFAE6),
        useMaterial3: true,
        fontFamily: 'Poppins',
      ),
      debugShowCheckedModeBanner: false,
      home: const MainScreen(),
    );
  }
}

// 2. App的主屏幕 (MainScreen Widget)
// ===================================================================
class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  int _selectedTopIndex = 0;
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  static const List<Widget> _pages = <Widget>[
    HomePage(),
    MapPage(),
    ReportPage(),
  ];

  void _onTopNavTapped(int index) {
    setState(() {
      _selectedTopIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        automaticallyImplyLeading: false,
          toolbarHeight: 100, // ⬅️ 提高 AppBar 高度
        //title: const Text('JustBrightForUTM', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 20)),
        title:const Center(child: UtmBrightTitle()), //import title
        backgroundColor: Color(0xFF8EB9D4),
       //backgroundColor: Color(0xFF6AA9FE),

        foregroundColor: Colors.black87,
        elevation: 1.0,
        actions: [
          IconButton(
            icon: const Icon(Icons.menu, size: 30),
            onPressed: () {
              _scaffoldKey.currentState?.openDrawer();
            },
          ),
        ],
      ),
      drawer: const AppDrawer(),
      body: Stack(
        clipBehavior: Clip.none,
        children: [
          Column(
            children: [
              TopNavBar(
                selectedIndex: _selectedTopIndex,
                onItemTapped: _onTopNavTapped,
              ),
              Expanded(
                child: IndexedStack(
                  index: _selectedTopIndex,
                  children: _pages,
                ),
              ),
            ],
          ),
          const SmartSosButton(),
        ],
      ),
    );
  }
}

// 3. 顶部导航栏 (TopNavBar Widget)
// ... [代码保持不变]
class TopNavBar extends StatelessWidget {
  final int selectedIndex;
  final Function(int) onItemTapped;

  const TopNavBar({super.key, required this.selectedIndex, required this.onItemTapped});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            spreadRadius: 1,
            blurRadius: 10,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildNavItem(context, Icons.home_filled, 'Home', 0),
          _buildNavItem(context, Icons.map_outlined, 'Map', 1),
          _buildNavItem(context, Icons.edit_note_outlined, 'Report', 2),
        ],
      ),
    );
  }

  Widget _buildNavItem(BuildContext context, IconData icon, String label, int index) {
    final bool isSelected = selectedIndex == index;
    final Color color = isSelected ? Theme.of(context).colorScheme.primary : Colors.grey.shade600;

    return GestureDetector(
      onTap: () => onItemTapped(index),
      behavior: HitTestBehavior.opaque,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(icon, color: color, size: 28),
            const SizedBox(height: 4),
            Text(label, style: TextStyle(color: color, fontSize: 12, fontWeight: isSelected ? FontWeight.bold : FontWeight.normal)),
            AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              margin: const EdgeInsets.only(top: 4),
              height: 3,
              width: isSelected ? 24 : 0,
              decoration: BoxDecoration(
                color: color,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
          ],
        ),
      ),
    );
  }
}         